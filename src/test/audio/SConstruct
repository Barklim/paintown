import os

env = Environment(ENV = os.environ)
#env['CC'] = 'clang'
#env['CXX'] = 'clang++'

def isLinux():
    import sys
    return 'linux' in sys.platform

# Just test this on linux for now
if isLinux():
    all = []
    try:
        env.VariantDir('build', '../../')
        env.Append(CPPPATH = ['#/src'])
        source = Split("""test.cpp build/util/sound/music-player.cpp build/util/sound/music-renderer.cpp build/util/debug.cpp build/util/utf.cpp
        build/util/sound/audio.cpp build/util/exceptions/exception.cpp build/util/token.cpp build/util/file-system.cpp build/util/directory.cpp build/util/thread.cpp build/util/system.cpp""")
        wav_source = Split("""wav.cpp build/util/sound/audio.cpp build/util/debug.cpp build/util/exceptions/exception.cpp build/util/sound/sound.cpp build/util/exceptions/load_exception.cpp""")
        music_source = Split("""music.cpp build/music/util/sound/music-player.cpp build/music/util/sound/music-renderer.cpp build/music/util/sound/audio.cpp build/music/util/exceptions/exception.cpp build/music/util/sound/sound.cpp build/music/util/exceptions/load_exception.cpp build/music/util/debug.cpp build/music/util/sound/music.cpp build/music/util/token.cpp build/music/util/file-system.cpp build/music/util/directory.cpp build/music/util/thread.cpp build/music/util/system.cpp build/music/util/utf.cpp""")

        env.Append(CPPPATH = '../..')
        env.Append(CPPDEFINES = ['USE_SDL', 'HAVE_MP3_MPG123', 'HAVE_OGG'])
        env.Append(CCFLAGS = ['-g3'])
        #env.Append(CCFLAGS = ['-O2', '-pg'])
        #env.Append(LINKFLAGS = ['-pg'])
        # env.ParseConfig('sdl-config --libs --cflags')
        env.ParseConfig('sdl-config --libs --cflags')
        env.ParseConfig('pkg-config vorbis vorbisfile --libs')

        env.Append(LIBS = ['mpg123', 'z'])

        musicEnv = env.Clone()
        musicEnv.VariantDir('build/music', '../../')
        #musicEnv.Append(CPPDEFINES = ['HAVE_OGG'])
        #musicEnv.ParseConfig('pkg-config vorbis vorbisfile --libs')
        # musicEnv.Append(LIBS = [zipLibrary(env), 'z', sflLibrary(env)])

        program = env.Program('test', source)
        wav = env.Program('wav', wav_source)
        music = musicEnv.Program('music', music_source)
        all.extend(program)
        all.extend(wav)
        all.extend(music)
        # all = [program, wav]
    except OSError:
        print "Problem with music test!: "
    Return('all')
else:
    all = []
    Return('all')
